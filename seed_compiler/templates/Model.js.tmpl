import { useState, useCallback } from 'react';

export function use{{ name }}() {
  const [items, setItems] = useState(() => {
    const saved = localStorage.getItem('{{ name|lower }}s');
    return saved ? JSON.parse(saved) : [];
  });

  // Persist to localStorage whenever items change
  const persistItems = useCallback((newItems) => {
    localStorage.setItem('{{ name|lower }}s', JSON.stringify(newItems));
    setItems(newItems);
  }, []);

  const create = useCallback((data) => {
    const defaults = {
      {% for field in fields %}
      {% if field.default is not none %}
      {{ field.name }}: {{ field|default_value_for_field }},
      {% endif %}
      {% endfor %}
    };
    const newItems = [...items, { ...defaults, ...data, id: Date.now().toString() }];
    persistItems(newItems);
  }, [items, persistItems]);

  const update = useCallback((id, data) => {
    const newItems = items.map(item => 
      item.id === id ? { ...item, ...data } : item
    );
    persistItems(newItems);
  }, [items, persistItems]);

  const remove = useCallback((id) => {
    const newItems = items.filter(item => item.id !== id);
    persistItems(newItems);
  }, [items, persistItems]);

  return { items, create, update, remove };
}
