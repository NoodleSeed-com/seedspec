import React, { useState } from 'react';
import { use{{ model.name }} } from '../models/{{ model.name }}';
{% for ref in model.references %}
import { use{{ ref }} } from '../models/{{ ref }}';
{% endfor %}

export function {{ name }}() {
  const { items, create, update, remove } = use{{ model.name }}();
  const [editingId, setEditingId] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  
  {% for ref in model.references %}
  const { items: {{ ref|lower }}Items } = use{{ ref }}();
  {% endfor %}

  return (
    <div className="bg-white shadow rounded-lg">
      <div className="px-4 py-5 sm:p-6">
        <h1 className="text-2xl font-bold text-gray-900 mb-8">{{ name }}</h1>
        
        {/* Create Form */}
        <div className="bg-gray-50 rounded-lg p-6 mb-8">
          <h2 className="text-lg font-medium text-gray-900 mb-4">Create New {{ model.name }}</h2>
          <form 
            className="space-y-6"
            onSubmit={async e => {
              e.preventDefault();
              setError(null);
              setLoading(true);
              try {
                const formData = new FormData(e.target);
                const data = Object.fromEntries(formData);
                await create(data);
                e.target.reset();
              } catch (err) {
                setError(err.message);
              } finally {
                setLoading(false);
              }
            }}
          >
            {% for field in model.fields %}
            <div>
              <label className="block text-sm font-medium text-gray-700">
                {{ field.name|title }}
              </label>
              {% if field.is_reference %}
              <select
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                name="{{ field.name }}"
                defaultValue=""
                {% if not field.optional %}required{% endif %}
              >
                <option value="">Select {{ field.type }}</option>
                {(() => {
                  const items = {{ field.type|lower }}Items;
                  return items && items.length > 0
                    ? items.map(item => (
                        <option 
                          key={item.id} 
                          value={item.id}
                        >
                          {item.title || item.name || item.id}
                        </option>
                      ))
                    : null
                })()}
              </select>
              {% else %}
              <input 
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                name="{{ field.name }}"
                type="{{ field.type|input_type }}"
                defaultValue={ {{ field|default_value_for_field }} }
                {% if not field.optional %}required{% endif %}
                {% if field.type == 'email' %}pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"{% endif %}
                {% if field.type == 'num' %}min="-9007199254740991" max="9007199254740991" step="any"{% endif %}
              />
              {% endif %}
            </div>
            {% endfor %}
            {error && error.validation && (
              <div className="mb-4 p-4 bg-red-50 border border-red-400 rounded text-red-700">
                <p className="font-medium">Invalid input:</p>
                <ul className="mt-2 text-sm">
                  {Object.entries(error.validation).map(([field, message]) => (
                    <li key={field}>{field}: {message}</li>
                  ))}
                </ul>
              </div>
            )}
            
            <button 
              type="submit"
              disabled={loading}
              className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed md:w-auto"
            >
              {loading ? 'Creating...' : 'Create'}
            </button>
          </form>
        </div>

        {/* Error Display */}
        {error && (
          <div className="mb-4 p-4 bg-red-50 border border-red-400 rounded text-red-700">
            {error}
          </div>
        )}

        {/* Loading State */}
        {loading && (
          <div className="mb-4 p-4 bg-gray-50 border border-gray-200 rounded">
            Loading...
          </div>
        )}

        {/* List */}
        <div className="space-y-4 md:grid md:grid-cols-2 md:gap-4 md:space-y-0">
          {items.map(item => (
            <div 
              key={item.id}
              className="bg-white shadow rounded-lg overflow-hidden border border-gray-200 md:flex md:items-center"
            >
              {editingId === item.id ? (
                <form 
                  className="p-4"
                  onSubmit={async e => {
                    e.preventDefault();
                    setError(null);
                    setLoading(true);
                    try {
                      const formData = new FormData(e.target);
                      const data = Object.fromEntries(formData);
                      await update(item.id, data);
                      setEditingId(null);
                    } catch (err) {
                      setError(err.message);
                    } finally {
                      setLoading(false);
                    }
                  }}
                >
                  {% for field in model.fields %}
                  <div className="mb-4">
                    <label className="block text-sm font-medium text-gray-700">
                      {{ field.name|title }}
                    </label>
                    {% if field.is_reference %}
                    <select
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      name="{{ field.name }}"
                      defaultValue={item.{{ field.name }} || ""}
                      {% if not field.optional %}required{% endif %}
                    >
                      <option value="">Select {{ field.type }}</option>
                      {(() => {
                        const items = {{ field.type|lower }}Items;
                        return items && items.length > 0
                          ? items.map(item => (
                              <option 
                                key={item.id} 
                                value={item.id}
                              >
                                {item.title || item.name || item.id}
                              </option>
                            ))
                          : null
                      })()}
                    </select>
                    {% else %}
                    <input
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                      name="{{ field.name }}"
                      type="{{ field.type|input_type }}"
                      defaultValue={item.{{ field.name }} !== undefined ? item.{{ field.name }} : {{ field|default_value_for_field }}}
                      {% if not field.optional %}required{% endif %}
                      {% if field.type == 'email' %}pattern="[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,}$"{% endif %}
                      {% if field.type == 'num' %}min="-9007199254740991" max="9007199254740991" step="any"{% endif %}
                    />
                    {% endif %}
                  </div>
                  {% endfor %}
                  <div className="flex gap-2">
                    <button 
                      type="submit"
                      disabled={loading}
                      className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed md:w-auto"
                      onClick={async (e) => {
                        e.preventDefault();
                        setError(null);
                        setLoading(true);
                        try {
                          const formData = new FormData(e.target.form);
                          const data = Object.fromEntries(formData);
                          await update(item.id, data);
                          setEditingId(null);
                        } catch (err) {
                          setError(err);
                        } finally {
                          setLoading(false);
                        }
                      }}
                    >
                      Save
                    </button>
                    <button
                      type="button"
                      onClick={() => setEditingId(null)}
                      className="inline-flex justify-center rounded-md border border-gray-300 bg-white py-2 px-4 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                    >
                      Cancel
                    </button>
                  </div>
                </form>
              ) : (
                <div className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      {% for field in model.fields %}
                      <div>
                        <span className="text-sm font-medium text-gray-500">{{ field.name|title }}:</span>
                        <span className="ml-2 text-sm text-gray-900">
                          {% if field.is_reference %}
                          {(() => {
                            const items = {{ field.type|lower }}Items;
                            const refId = item.{{ field.name }};
                            if (!items || !refId) return '';
                            const refItem = items.find(i => i.id === refId);
                            return refItem ? (refItem.title || refItem.name || refItem.id) : '';
                          })()}
                          {% else %}
                          {item.{{ field.name }} !== undefined ? item.{{ field.name }}.toString() : ''}
                          {% endif %}
                        </span>
                      </div>
                      {% endfor %}
                    </div>
                    <div className="flex gap-2">
                      <button
                        onClick={() => setEditingId(item.id)}
                        className="inline-flex items-center rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                      >
                        Edit
                      </button>
                      <button
                        onClick={async () => {
                          if (!window.confirm('Are you sure you want to delete this item?')) return;
                          setError(null);
                          setLoading(true);
                          try {
                            await remove(item.id);
                          } catch (err) {
                            setError(err);
                          } finally {
                            setLoading(false);
                          }
                        }}
                        disabled={loading}
                        className="inline-flex items-center rounded-md border border-transparent bg-red-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed md:w-auto"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}
